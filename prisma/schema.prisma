// ------------------ Prisma Schema File ------------------

// Generator and Data Source
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------ Core Schema for Better Auth ------------------

enum UserRole {  
  ADMIN
  USER
}

model User {
  id            String      @id
  name          String
  email         String      @unique
  emailVerified Boolean
  image         String[]
  phoneNumber   String       
  role          UserRole    @default(USER) // Enum field with default value
  verified      Boolean     @default(false) // Super admin verification
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  pharmacies    Pharmacy[]  @relation("PharmacyAdmin")

  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

// ------------------ Custom Models for MedFind ------------------

enum ApprovalStatus {
  PENDING
  APPROVED
}

model Pharmacy {
  id             String        @id @default(cuid())
  name           String
  location       String
  phoneNumber    String
  email          String         @unique
  adminId        String?       // References the User (admin)
  admin          User?         @relation("PharmacyAdmin", fields: [adminId], references: [id])
  medicines      Medicine[]
  approvalStatus ApprovalStatus @default(PENDING) 
  admins         String[]      // List of additional admin IDs
  pharmacyImage  String[]
  pharmacyLicence String[]
  ownerLicence   String         // Now required
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Medicine {
  id          String   @id @default(cuid())
  name        String
  category    String
  description String?
  price       Float
  administrationRoute String
  form        String
  storage     String 
  quantity    Int
  supplier    String
  doseUnit        String
  doseAmount  String
  medicineImage String[]
  pharmacyId  String   // References the Pharmacy
  pharmacy    Pharmacy @relation(fields: [pharmacyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}
